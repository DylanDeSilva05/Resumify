name: Backend Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Backend/**'
      - '.github/workflows/backend-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'Backend/**'

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/requirements-test.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./Backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run Unit Tests
      working-directory: ./Backend
      run: |
        pytest tests/unit/ -v -m unit --cov=app --cov-report=xml --cov-report=term
      continue-on-error: false

    - name: Run Integration Tests
      working-directory: ./Backend
      run: |
        pytest tests/integration/ -v -m integration
      continue-on-error: false

    - name: Run Security Tests
      working-directory: ./Backend
      run: |
        pytest tests/security/ -v -m security
      continue-on-error: false

    - name: Run Performance Tests
      working-directory: ./Backend
      run: |
        pytest tests/performance/ -v -m performance -m "not slow"
      continue-on-error: true

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./Backend/coverage.xml
        flags: backend
        name: backend-coverage-${{ matrix.python-version }}
        fail_ci_if_error: false

    - name: Generate HTML Coverage Report
      working-directory: ./Backend
      if: always()
      run: |
        coverage html

    - name: Upload Coverage HTML Report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: Backend/htmlcov/

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      working-directory: ./Backend
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit Security Scan
      working-directory: ./Backend
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ -f txt

    - name: Upload Bandit Report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: bandit-security-report
        path: Backend/bandit-report.json

    - name: Run Safety Check
      working-directory: ./Backend
      run: |
        safety check --json || true
      continue-on-error: true

  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black pylint

    - name: Run Flake8
      working-directory: ./Backend
      run: |
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with Black
      working-directory: ./Backend
      run: |
        black --check app/ || true
      continue-on-error: true

  test-summary:
    runs-on: ubuntu-latest
    needs: [test, security-scan, lint]
    if: always()

    steps:
    - name: Test Summary
      run: |
        echo "## Test Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "âœ… All test suites completed" >> $GITHUB_STEP_SUMMARY
        echo "- Unit Tests" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests" >> $GITHUB_STEP_SUMMARY
        echo "- Security Tests" >> $GITHUB_STEP_SUMMARY
        echo "- Performance Tests" >> $GITHUB_STEP_SUMMARY
        echo "- Security Scans (Bandit, Safety)" >> $GITHUB_STEP_SUMMARY
        echo "- Code Linting" >> $GITHUB_STEP_SUMMARY
